<?xml version="1.0"?>

<launch>
  <arg name="debug" default="true" />
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="log_file" default="quad"/>


<!--param name="use_sim_time" type="bool" value="true"/-->
  <!-- The name of the parameter under which the URDF is loaded -->
  <arg name="robot_description" default="robot_description"/>


  <!-- Spawn 3DR Model -->                  
<!--    <include file="$(find quad_gazebo)/launch/spawn/spawn_quad_kinect.launch"> -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find quad_description)/urdf/kit_c_kinect.xacro'" />

  <!--include file="$(find quad_gazebo)/launch/spawn/spawn_quad_kinect_kitchen.launch">    
    <arg name="model" value="$(find quad_description)/urdf/kit_c_base.xacro" />  
    <arg name="enable_logging" value="$(arg enable_logging)" />
    <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
    <arg name="log_file" value="$(arg log_file)"/>
  </include-->


  <!-- Spawn Control Nodes --> 
  <group ns="quad">
    <node name="joy_node" pkg="joy" type="joy_node" />
    <node name="quad_joystick_interface" pkg="quad_joystick_interface" type="quad_joystick_interface" output="screen"/> 
    <node name="waypoint_node" pkg="quad_control" type="waypoint_publisher_node" output="screen"/> 
  </group>
  <group ns="quad">
    <node name="position_controller_node" pkg="quad_control" type="position_controller_node" output="screen"> 
      <rosparam command="load" file="$(find quad_gazebo)/resource/kit_c.yaml" /> 
      <rosparam command="load" file="$(find quad_control)/resource/position_controller.yaml" /> 
    </node> 
    <node name="attitude_controller_node" pkg="quad_control" type="attitude_controller_node" output="screen"> 
      <rosparam command="load" file="$(find quad_gazebo)/resource/kit_c.yaml" /> 
      <rosparam command="load" file="$(find quad_control)/resource/attitude_controller.yaml" />  
    </node> 
  </group>

  <node pkg="tf" type="static_transform_publisher" name="world_to_map" args="0.0 0.0 0.0 0.0 0.0 0.0 world map 100" />
  
  <node pkg="tf" type="static_transform_publisher" name="Quad_to_map" args="-151.0 -688.0 -3.0 0.0 0.0 0.0 world quad 100" />

  <node pkg="tf" type="static_transform_publisher" name="quad_broadcaster_base" args="0.0 0.0 0.0 0.00 0.00 0.00  world odom 100" />

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

<!--rosrun action_controller action_controller -->
  <node name="action_controller" pkg="action_controller" type="action_controller" ></node>

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find quad_srdf)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="false"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="db" default="true" />
  </include>

  <!-- Visualisation RVIZ -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find quad_srdf)/resource/moveit.rviz" output="screen"/>

<!--  Odom tpoic from physical model re-published to /quad/ground_truth/odom topic -->
<node pkg="imu_integration" type="odom_remap" name="odom_remap" />

<!--  IMU tpoic from physical model re-published to /quad/imu topic -->
<node pkg="robot_statepub" type="imu_remap" name="imu_remap" />

<!--  IMU integrated to get /quad/ground_truth/odom -->
<!--node pkg="imu_integration" type="publisher" name="publisher" /-->

<!--  Robot TF published -->
<node pkg="robot_statepub" type="robot_tf_publisher" name="robot_tf_publisher" />

<!--  Octomap file published on Moveit PlanningScene [with is_diff=True]-->
  <!--node pkg="octomap_publisher1" type="octo2ps" name="octo2ps" /-->

<!--  trajectory published to Quad through MAVROS -->
<node pkg="robot_statepub" type="trajectory_publisher" name="trajectory_publisher" />  
</launch>